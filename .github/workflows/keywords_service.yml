name: Keywords Service


on: [push]

jobs:
      
  test:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
      
    services:
      postgres:
        image: postgres

        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: test
          POSTGRES_DB: keyword_test_db

        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

        ports: 
          - 5432:5432

    steps:

    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest requests
        python setup.py sdist
        pip install dist/*
        unzip nltk_data/archive/stopwords.zip -d nltk_data/corpora
        unzip nltk_data/archive/wordnet.zip -d nltk_data/corpora
    
    - name: Initialize database 
      timeout-minutes: 2
      env: 
        PGHOST: localhost
        PGPORT: 5432
        PGUSER: test
        PGPASSWORD: postgres
        PGDATABASE: keyword_test_db
    
      run:
        psql -f ./keywords_service/schema.sql

    - name: Test with pytest
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_PASSWORD: postgres
        POSTGRES_USER: test
        POSTGRES_DB: keyword_test_db
        NLTK_DATA: ./nltk_data
        FLASK_SECRET_KEY: test

      run: |
        pytest

  build-push:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: keywords_service
        IMAGE_TAG: ${{ github.sha }}
      run: |
        python setup.py sdist
        docker build -t keywords_service .
        docker tag keywords_service $ECR_REGISTRY/$ECR_REPOSITORY
        docker push $ECR_REGISTRY/$ECR_REPOSITORY

    - name: Logout of Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}

